import tensorflow as tf

weights = {
    'wc1': tf.Variable(tf.random_normal([5, 5, 3, 64])),
    'wc2a_2a': tf.Variable(tf.random_normal([1, 1, 64, 64])),
    'wc2a_2b': tf.Variable(tf.random_normal([3, 3, 64, 64])),
    'wc2a_2c': tf.Variable(tf.random_normal([1, 1, 64, 256])),
    'wc2a_1': tf.Variable(tf.random_normal([1, 1, 64, 256])),
    'wc2b_2a': tf.Variable(tf.random_normal([1, 1, 256, 64])),
    'wc2b_2b': tf.Variable(tf.random_normal([3, 3, 64, 64])),
    'wc2b_2c': tf.Variable(tf.random_normal([1, 1, 64, 256])),
    'wc2c_2a': tf.Variable(tf.random_normal([1, 1, 256, 64])),
    'wc2c_2b': tf.Variable(tf.random_normal([3, 3, 64, 64])),
    'wc2c_2c': tf.Variable(tf.random_normal([1, 1, 64, 256])),
    'wc3a_2a': tf.Variable(tf.random_normal([1, 1, 256, 128])),
    'wc3a_2b': tf.Variable(tf.random_normal([3, 3, 128, 128])),
    'wc3a_2c': tf.Variable(tf.random_normal([1, 1, 128, 512])),
    'wc3a_1': tf.Variable(tf.random_normal([1, 1, 256, 512])),
    'wc3b_2a': tf.Variable(tf.random_normal([1, 1, 512, 128])),
    'wc3b_2b': tf.Variable(tf.random_normal([3, 3, 128, 128])),
    'wc3b_2c': tf.Variable(tf.random_normal([1, 1, 128, 512])),
    'wc3c_2a': tf.Variable(tf.random_normal([1, 1, 512, 128])),
    'wc3c_2b': tf.Variable(tf.random_normal([3, 3, 128, 128])),
    'wc3c_2c': tf.Variable(tf.random_normal([1, 1, 128, 512])),
    'wc3d_2a': tf.Variable(tf.random_normal([1, 1, 512, 128])),
    'wc3d_2b': tf.Variable(tf.random_normal([3, 3, 128, 128])),
    'wc3d_2c': tf.Variable(tf.random_normal([1, 1, 128, 512])),

    'up_wc1': tf.Variable(tf.random_normal([5, 5, 3, 64])),
    'up_wc2': tf.Variable(tf.random_normal([3, 3, 64, 96])),
    'up_wc3': tf.Variable(tf.random_normal([3, 3, 96, 128])),
    'up_wc4': tf.Variable(tf.random_normal([3, 3, 128, 256])),

    'down_wc1': tf.Variable(tf.random_normal([5, 5, 3, 64])),
    'down_wc2': tf.Variable(tf.random_normal([3, 3, 64, 96])),
    'down_wc3': tf.Variable(tf.random_normal([3, 3, 96, 128])),
    'down_wc4': tf.Variable(tf.random_normal([3, 3, 128, 256])),

    'out': tf.Variable(tf.random_normal([8*8*512, 100])),
    'out2': tf.Variable(tf.random_normal([6*6*256, 100])),
    'out3': tf.Variable(tf.random_normal([6*6*256, 100])),

    'up_w': tf.Variable(tf.random_normal([1])),
    'down_w': tf.Variable(tf.random_normal([1])),

}
biases = {
    'bc1': tf.Variable(tf.random_normal([64])),
    'bc2a_2a': tf.Variable(tf.random_normal([64])),
    'bc2a_2b': tf.Variable(tf.random_normal([64])),
    'bc2a_2c': tf.Variable(tf.random_normal([256])),
    'bc2a_1': tf.Variable(tf.random_normal([256])),
    'bc2b_2a': tf.Variable(tf.random_normal([64])),
    'bc2b_2b': tf.Variable(tf.random_normal([64])),
    'bc2b_2c': tf.Variable(tf.random_normal([256])),
    'bc2c_2a': tf.Variable(tf.random_normal([64])),
    'bc2c_2b': tf.Variable(tf.random_normal([64])),
    'bc2c_2c': tf.Variable(tf.random_normal([256])),
    'bc3a_2a': tf.Variable(tf.random_normal([128])),
    'bc3a_2b': tf.Variable(tf.random_normal([128])),
    'bc3a_2c': tf.Variable(tf.random_normal([512])),
    'bc3a_1': tf.Variable(tf.random_normal([512])),
    'bc3b_2a': tf.Variable(tf.random_normal([128])),
    'bc3b_2b': tf.Variable(tf.random_normal([128])),
    'bc3b_2c': tf.Variable(tf.random_normal([512])),
    'bc3c_2a': tf.Variable(tf.random_normal([128])),
    'bc3c_2b': tf.Variable(tf.random_normal([128])),
    'bc3c_2c': tf.Variable(tf.random_normal([512])),
    'bc3d_2a': tf.Variable(tf.random_normal([128])),
    'bc3d_2b': tf.Variable(tf.random_normal([128])),
    'bc3d_2c': tf.Variable(tf.random_normal([512])),

    'up_bc1': tf.Variable(tf.random_normal([64])),
    'up_bc2': tf.Variable(tf.random_normal([96])),
    'up_bc3': tf.Variable(tf.random_normal([128])),
    'up_bc4': tf.Variable(tf.random_normal([256])),

    'down_bc1': tf.Variable(tf.random_normal([64])),
    'down_bc2': tf.Variable(tf.random_normal([96])),
    'down_bc3': tf.Variable(tf.random_normal([128])),
    'down_bc4': tf.Variable(tf.random_normal([256])),
}
